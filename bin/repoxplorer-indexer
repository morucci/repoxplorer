#!/usr/bin/python

# Copyright 2016, Fabien Boucher
# Copyright 2016, Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import imp
import sys
import time
import logging
import argparse
import logging.config

from repoxplorer.indexer.git import indexer
from repoxplorer.index import projects

config = '%s/local/share/repoxplorer/config.py' % sys.prefix
logger = logging.getLogger('indexerDaemon')

parser = argparse.ArgumentParser(description='RepoXplorer indexer')
parser.add_argument(
    '--forever', action='store_true', default=False,
    help='Make the indexer run forever')
parser.add_argument(
    '--extract-workers', type=int, default=0,
    help='Specify the amount of worker processes for '
         'extracting commits information (default = auto)')
parser.add_argument(
    '--config', default=config,
    help='Path to the repoXplorer configuration file')
parser.add_argument(
    '--project', type=str, default=None,
    help='Specify the project to index')

args = parser.parse_args()


def process():
    projects_index = projects.Projects(conf.db_path,
                                       conf.db_default_file)
    prjs = projects_index.get_projects_raw()
    for pid, data in prjs.items():
        if args.project and args.project != pid:
            continue
        logger.info("Start indexing project %s" % pid)
        for rid, repo in data['repos'].items():
            r = indexer.RepoIndexer(rid,
                                    repo['uri'],
                                    parsers=repo['parsers'],
                                    config=args.config)
            r.git_init()
            try:
                r.get_refs()
            except Exception, e:
                logger.warning("Unable to access the repository %s: %s" % (
                               r.base_id, e))
                continue
            r.get_heads()
            r.get_tags()
            for branch in repo['branches']:
                if not [head for head in r.heads if
                        head[1].endswith(branch)]:
                    logger.warning(
                        "Repository %s does not have the "
                        "requested branch %s" % (r.base_id, branch))
                    continue
                r.set_branch(branch)
                if r.is_branch_fully_indexed():
                    logger.info("Repository branch fully indexed %s" % (
                        r.ref_id))
                    continue
                logger.info("Start indexing repository branch %s" % r.ref_id)
                try:
                    r.git_fetch_branch()
                except Exception, e:
                    logger.warning("Unable to fetch repository "
                                   "branch %s: %s" % (r.ref_id, e))
                    continue
                try:
                    r.git_get_commit_obj()
                    r.get_current_commit_indexed()
                    r.compute_to_index_to_delete()
                    r.index(args.extract_workers)
                except Exception, e:
                    logger.warning("Unable to index repository "
                                   "branch %s: %s" % (r.ref_id, e))
                    logger.exception("Exception is:")
                    continue
            try:
                r.index_tags()
            except Exception, e:
                logger.warning("Unable to index repository tags "
                               "%s: %s" % (r.base_id, e))
                continue


if __name__ == "__main__":
    conf = imp.load_source('config', args.config)
    logging.config.dictConfig(conf.indexer_logging)
    if args.forever:
        while True:
            try:
                process()
            except Exception:
                logger.exception("Unexcepted error occured")
            if args.forever:
                logger.info(
                    "Waiting the loop delay (%s/s)" % conf.indexer_loop_delay)
                time.sleep(conf.indexer_loop_delay)
    else:
        try:
            process()
        except Exception:
            logger.exception("Unexcepted error occured")
