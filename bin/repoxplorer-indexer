#!/usr/bin/python

# Copyright 2016, Fabien Boucher
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import time
import logging
import argparse
import logging.config

from repoxplorer.indexer.git import indexer
from repoxplorer import index
from repoxplorer.index import projects

ROUND_DELAY = 5

config = '%s/local/share/repoxplorer/config.py' % sys.prefix
logger = logging.getLogger('indexerDaemon')

parser = argparse.ArgumentParser(description='RepoXplorer indexer')
parser.add_argument(
    '--forever', action='store_true', default=False,
    help='Make the indexer run forever')
parser.add_argument(
    '--logging', type=str,
    default='%s/local/share/repoxplorer/logging.conf' % sys.prefix,
    help='Specify a custom logging configuration file')
parser.add_argument(
    '--extract-workers', type=int, default=0,
    help='Specify the amount of worker processes for '
         'extracting commits information (default = auto)')
parser.add_argument(
    '--projects', type=str,
    default='%s/local/share/repoxplorer/projects.yaml' % sys.prefix,
    help='Specify the path to the projects.yaml file')

args = parser.parse_args()


def process():
    con = index.Connector()
    prjs = projects.Projects(args.projects).get_projects()
    for pid, plist in prjs.items():
        logger.info("Start indexing project id %s" % pid)
        for prj in plist:
            p = indexer.ProjectIndexer(prj['name'],
                                       prj['uri'],
                                       prj['branch'],
                                       con=con,
                                       config=config)
            logger.info("Index sub-project %s" % str(p))
            p.git_init()
            try:
                p.git_fetch_branch()
            except KeyError:
                logger.info(
                    "Sub-project %s does not have the"
                    " requested branch %s. Skip it." % (str(p), prj['branch']))
                continue
            p.git_get_commit_obj()
            p.get_current_commit_indexed()
            p.compute_to_index_to_delete()
            p.index(args.extract_workers)

if __name__ == "__main__":
    logging.config.fileConfig(args.logging)
    if args.forever:
        while True:
            process()
            if args.forever:
                logger.info("Waiting %s seconds" % ROUND_DELAY)
                time.sleep(ROUND_DELAY)
    else:
        process()
