#!/usr/bin/python

# Copyright 2016, Fabien Boucher
# Copyright 2016, Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import imp
import sys
import time
import logging
import argparse
import logging.config

from repoxplorer.indexer.git import indexer
from repoxplorer.index import projects

config = '%s/local/share/repoxplorer/config.py' % sys.prefix
logger = logging.getLogger('indexerDaemon')

parser = argparse.ArgumentParser(description='RepoXplorer indexer')
parser.add_argument(
    '--forever', action='store_true', default=False,
    help='Make the indexer run forever')
parser.add_argument(
    '--extract-workers', type=int, default=0,
    help='Specify the amount of worker processes for '
         'extracting commits information (default = auto)')

args = parser.parse_args()


def process():
    prjs = projects.Projects(conf.projects_file_path).get_projects_unf()
    for pid, repos in prjs.items():
        logger.info("Start indexing project id %s ..." % pid)
        for repo in repos:
            r = indexer.RepoIndexer(repo['name'],
                                    repo['uri'],
                                    parsers=repo['parsers'],
                                    config=config)
            r.git_init()
            r.get_refs()
            r.get_heads()
            r.get_tags()
            for branch in repo['branches']:
                if not [head for head in r.heads if
                        head[1].endswith(branch)]:
                    logger.warning(
                        "Repository %s does not have the"
                        " requested branch %s. Skip it." % (
                            str(r), branch))
                    continue
                r.set_branch(branch)
                logger.info("Index repository branch %s" % str(r))
                r.git_fetch_branch()
                r.git_get_commit_obj()
                r.get_current_commit_indexed()
                r.compute_to_index_to_delete()
                r.index(args.extract_workers)
            r.index_tags()

if __name__ == "__main__":
    conf = imp.load_source('config', config)
    logging.config.dictConfig(conf.indexer_logging)
    if args.forever:
        while True:
            process()
            if args.forever:
                logger.info(
                    "Waiting the loop delay (%s/s)" % conf.indexer_loop_delay)
                time.sleep(conf.indexer_loop_delay)
    else:
        process()
